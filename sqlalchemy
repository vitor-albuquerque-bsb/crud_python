"""Exemplo de CRUD com SQLAlchemy e SQLite3"""

from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Criar banco na memória
engine = create_engine('sqlite://')

# Caminho relativo (pode ser utilizado o caminho absoluto):
engine = create_engine('sqlite:///db.sqlite3')

# Para utilizar o debug utilizar deve-se adicionar ``echo=True``:
# engine = create_engine('sqlite:///db.sqlite3', echo=True)

# Criando uma classe "Session" já configurada.
# Session é instanciado posteriormente para interação com a tabela.
Session = sessionmaker(bind=engine)

Base = declarative_base()

class Clientes(Base):
    """Cada classe representa uma tabela do banco"""
    # Nome da tabela, se a variável não for declarada será utilizado o nome da classe.
    __tablename__ = "Clientes"

    # Colunas da tabela.
    id = Column(Integer, primary_key=True)
    nome = Column('nome', String(32))
    idade = Column('idade', Integer)
    sexo = Column('sexo', String(10))

    def __init__(self, nome, idade, sexo):
        """Construtor.

        Utilizando o construtor para passar os valores
        no momento em que a classe é instanciada.

        :param nome: (str).
        :param idade: (int).
        :param sexo: (str).
        """
        self.nome = nome
        self.idade = idade
        self.sexo = sexo

if __name__ == "__main__":
    # Removendo todas as tabelas do banco.
    Base.metadata.drop_all(engine)

    # Criando todas as tabelas.
    Base.metadata.create_all(engine)

    # Criando uma sessão (add, commit, query, etc).
    session = Session()

    # Criando os dados que serão inseridos na tabela.
    # Classe com o construtor.
    usuarios = [Clientes('Maria', 20, 'Feminino'), Clientes('Pedro', 50, 'Masculino'),Clientes('Grazy', 38, 'Feminino')]

    # Caso não seja utilizado o construtor na classe
    # os dados são passados depois de se criar a instancia.
    #usuario = Clientes()
    #usuario.nome = 'Camila'
    #usuario.idade = 50
    #usuario.sexo = 'Feminino'

    # Inserindo vários registros na tabela.
    session.add_all(usuarios)

    # Persistindo os dados.
    session.commit()

    # Consulta registros com filtro.
    #dados = session.query(NomeDaTabela).filter(NomeDaTabela.idade > 40).all()
    #print(dados)
    #for linha in dados:
    #     print(f'Nome: {linha.nome} - Idade: {linha.idade} - Sexo: {linha.sexo}')

    # Alterar um registro da tabela.
    session.query(Clientes).filter(Clientes.id == 1).update({'nome': 'Roberto'})
    session.commit()

    # Remover um registro da tabela.
    session.query(Clientes).filter(Clientes.id == 1).delete()
    session.commit()

    # Consultar todos os registros.
    dados = session.query(Clientes).all()
    print(dados)
    for linha in dados:
        print(f'Nome: {linha.nome} - Idade: {linha.idade} - Sexo: {linha.sexo}')

    # Fechando a sessão.
    session.close()
